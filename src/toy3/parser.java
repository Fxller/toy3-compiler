
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package toy3;

import java_cup.runtime.*;
import java.util.*;
import nodes.body.*;
import nodes.defdecl.*;
import nodes.expr.*;
import nodes.pardecl.*;
import nodes.program.*;
import nodes.stat.*;
import nodes.vardecl.*;
import nodes.funcall.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\010\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\004\004" +
    "\000\002\004\002\000\002\005\006\000\002\006\005\000" +
    "\002\006\007\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\011\000\002\012\010\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\016\005\000\002\016\003" +
    "\000\002\015\003\000\002\015\004\000\002\017\004\000" +
    "\002\017\002\000\002\020\006\000\002\021\004\000\002" +
    "\021\002\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\022\004\000\002\022\012" +
    "\000\002\022\010\000\002\022\010\000\002\022\005\000" +
    "\002\023\005\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\025\006\000\002\025\005\000\002\026" +
    "\005\000\002\026\005\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\005\000\002\026\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\005\000\002\026" +
    "\004\000\002\026\004\000\002\026\003\000\002\026\003" +
    "\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\004\005\001\002\000\004\002\224\001" +
    "\002\000\010\005\ufffd\020\011\052\006\001\002\000\010" +
    "\010\ufff7\023\223\024\116\001\002\000\004\010\216\001" +
    "\002\000\010\005\ufffd\020\011\052\006\001\002\000\004" +
    "\052\161\001\002\000\004\005\015\001\002\000\010\005" +
    "\ufffd\020\011\052\006\001\002\000\004\005\ufffe\001\002" +
    "\000\036\006\ufffb\016\ufffb\017\ufffb\021\ufffb\030\ufffb\033" +
    "\ufffb\034\ufffb\036\ufffb\047\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\001\002\000\036\006\uffdb\016\030\017" +
    "\037\021\042\030\031\033\023\034\026\036\036\047\025" +
    "\052\033\053\034\054\021\055\017\056\043\001\002\000" +
    "\050\007\uffe9\010\uffe9\022\uffe9\023\uffe9\026\uffe9\027\uffe9" +
    "\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\050\uffe9\051\uffe9\061\uffe9" +
    "\001\002\000\040\006\uffdb\016\030\017\037\021\042\030" +
    "\031\033\023\034\026\036\036\047\025\052\156\053\034" +
    "\054\021\055\017\056\043\060\uffdb\001\002\000\050\007" +
    "\uffeb\010\uffeb\022\uffeb\023\uffeb\026\uffeb\027\uffeb\035\uffeb" +
    "\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044" +
    "\uffeb\045\uffeb\046\uffeb\050\uffeb\051\uffeb\061\uffeb\001\002" +
    "\000\050\007\uffba\010\uffba\022\uffba\023\uffba\026\uffba\027" +
    "\uffba\035\uffba\036\uffba\037\uffba\040\uffba\041\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\050\uffba\051\uffba\061" +
    "\uffba\001\002\000\004\021\150\001\002\000\004\006\147" +
    "\001\002\000\026\016\030\017\037\021\042\036\036\047" +
    "\025\052\046\053\034\054\021\055\017\056\043\001\002" +
    "\000\026\016\030\017\037\021\042\036\036\047\025\052" +
    "\046\053\034\054\021\055\017\056\043\001\002\000\042" +
    "\007\143\026\uffbb\027\uffbb\035\uffbb\036\uffbb\037\uffbb\040" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\050\uffbb\051\uffbb\061\uffbb\001\002\000\050\007\uffee\010" +
    "\uffee\022\uffee\023\uffee\026\uffee\027\uffee\035\uffee\036\uffee" +
    "\037\uffee\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045" +
    "\uffee\046\uffee\050\uffee\051\uffee\061\uffee\001\002\000\004" +
    "\021\130\001\002\000\044\007\uffce\022\uffce\026\uffce\027" +
    "\uffce\035\057\036\053\037\063\040\061\041\056\042\065" +
    "\043\066\044\060\045\062\046\055\050\054\051\067\061" +
    "\126\001\002\000\054\010\ufff7\021\047\023\117\024\116" +
    "\025\uffd0\026\uffbc\027\uffbc\035\uffbc\036\uffbc\037\uffbc\040" +
    "\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\050\uffbc\051\uffbc\061\uffbc\063\uffd0\001\002\000\050\007" +
    "\uffec\010\uffec\022\uffec\023\uffec\026\uffec\027\uffec\035\uffec" +
    "\036\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044" +
    "\uffec\045\uffec\046\uffec\050\uffec\051\uffec\061\uffec\001\002" +
    "\000\040\006\ufffc\016\ufffc\017\ufffc\021\ufffc\030\ufffc\033" +
    "\ufffc\034\ufffc\036\ufffc\047\ufffc\052\ufffc\053\ufffc\054\ufffc" +
    "\055\ufffc\056\ufffc\060\ufffc\001\002\000\026\016\030\017" +
    "\037\021\042\036\036\047\025\052\046\053\034\054\021" +
    "\055\017\056\043\001\002\000\050\007\uffed\010\uffed\022" +
    "\uffed\023\uffed\026\uffed\027\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\050\uffed\051\uffed\061\uffed\001\002\000\006\026\111" +
    "\027\112\001\002\000\006\025\104\063\105\001\002\000" +
    "\026\016\030\017\037\021\042\036\036\047\025\052\046" +
    "\053\034\054\021\055\017\056\043\001\002\000\050\007" +
    "\uffea\010\uffea\022\uffea\023\uffea\026\uffea\027\uffea\035\uffea" +
    "\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\050\uffea\051\uffea\061\uffea\001\002" +
    "\000\034\022\064\035\057\036\053\037\063\040\061\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\050\054" +
    "\051\067\001\002\000\050\007\uffbb\010\uffbb\022\uffbb\023" +
    "\uffbb\026\uffbb\027\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb" +
    "\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb\050" +
    "\uffbb\051\uffbb\061\uffbb\001\002\000\052\007\uffbc\010\uffbc" +
    "\021\047\022\uffbc\023\uffbc\026\uffbc\027\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\046\uffbc\050\uffbc\051\uffbc\061\uffbc\001\002\000" +
    "\030\016\030\017\037\021\042\022\051\036\036\047\025" +
    "\052\046\053\034\054\021\055\017\056\043\001\002\000" +
    "\004\022\052\001\002\000\050\007\uffcc\010\uffcc\022\uffcc" +
    "\023\uffcc\026\uffcc\027\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc" +
    "\050\uffcc\051\uffcc\061\uffcc\001\002\000\050\007\uffcd\010" +
    "\uffcd\022\uffcd\023\uffcd\026\uffcd\027\uffcd\035\uffcd\036\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045" +
    "\uffcd\046\uffcd\050\uffcd\051\uffcd\061\uffcd\001\002\000\026" +
    "\016\030\017\037\021\042\036\036\047\025\052\046\053" +
    "\034\054\021\055\017\056\043\001\002\000\026\016\030" +
    "\017\037\021\042\036\036\047\025\052\046\053\034\054" +
    "\021\055\017\056\043\001\002\000\026\016\030\017\037" +
    "\021\042\036\036\047\025\052\046\053\034\054\021\055" +
    "\017\056\043\001\002\000\026\016\030\017\037\021\042" +
    "\036\036\047\025\052\046\053\034\054\021\055\017\056" +
    "\043\001\002\000\026\016\030\017\037\021\042\036\036" +
    "\047\025\052\046\053\034\054\021\055\017\056\043\001" +
    "\002\000\026\016\030\017\037\021\042\036\036\047\025" +
    "\052\046\053\034\054\021\055\017\056\043\001\002\000" +
    "\026\016\030\017\037\021\042\036\036\047\025\052\046" +
    "\053\034\054\021\055\017\056\043\001\002\000\026\016" +
    "\030\017\037\021\042\036\036\047\025\052\046\053\034" +
    "\054\021\055\017\056\043\001\002\000\026\016\030\017" +
    "\037\021\042\036\036\047\025\052\046\053\034\054\021" +
    "\055\017\056\043\001\002\000\050\007\uffbf\010\uffbf\022" +
    "\uffbf\023\uffbf\026\uffbf\027\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\050\uffbf\051\uffbf\061\uffbf\001\002\000\026\016\030" +
    "\017\037\021\042\036\036\047\025\052\046\053\034\054" +
    "\021\055\017\056\043\001\002\000\026\016\030\017\037" +
    "\021\042\036\036\047\025\052\046\053\034\054\021\055" +
    "\017\056\043\001\002\000\026\016\030\017\037\021\042" +
    "\036\036\047\025\052\046\053\034\054\021\055\017\056" +
    "\043\001\002\000\050\007\uffc6\010\uffc6\022\uffc6\023\uffc6" +
    "\026\uffc6\027\uffc6\035\057\036\053\037\063\040\061\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\050\054" +
    "\051\uffc6\061\uffc6\001\002\000\050\007\uffc3\010\uffc3\022" +
    "\uffc3\023\uffc3\026\uffc3\027\uffc3\035\057\036\053\037\063" +
    "\040\061\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\050\uffc3\051\uffc3\061\uffc3\001\002\000\050\007\uffc0" +
    "\010\uffc0\022\uffc0\023\uffc0\026\uffc0\027\uffc0\035\057\036" +
    "\053\037\063\040\061\041\uffc0\042\uffc0\043\uffc0\044\uffc0" +
    "\045\uffc0\046\uffc0\050\uffc0\051\uffc0\061\uffc0\001\002\000" +
    "\050\007\uffc9\010\uffc9\022\uffc9\023\uffc9\026\uffc9\027\uffc9" +
    "\035\057\036\053\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051\uffc9\061\uffc9" +
    "\001\002\000\050\007\uffc5\010\uffc5\022\uffc5\023\uffc5\026" +
    "\uffc5\027\uffc5\035\057\036\053\037\063\040\061\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\050\uffc5\051" +
    "\uffc5\061\uffc5\001\002\000\050\007\uffc8\010\uffc8\022\uffc8" +
    "\023\uffc8\026\uffc8\027\uffc8\035\057\036\053\037\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8" +
    "\050\uffc8\051\uffc8\061\uffc8\001\002\000\050\007\uffc2\010" +
    "\uffc2\022\uffc2\023\uffc2\026\uffc2\027\uffc2\035\057\036\053" +
    "\037\063\040\061\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\051\uffc2\061\uffc2\001\002\000\050" +
    "\007\uffcb\010\uffcb\022\uffcb\023\uffcb\026\uffcb\027\uffcb\035" +
    "\057\036\053\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\046\uffcb\050\uffcb\051\uffcb\061\uffcb\001" +
    "\002\000\050\007\uffc1\010\uffc1\022\uffc1\023\uffc1\026\uffc1" +
    "\027\uffc1\035\057\036\053\037\063\040\061\041\uffc1\042" +
    "\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\050\uffc1\051\uffc1" +
    "\061\uffc1\001\002\000\050\007\uffc4\010\uffc4\022\uffc4\023" +
    "\uffc4\026\uffc4\027\uffc4\035\057\036\053\037\063\040\061" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\050" +
    "\uffc4\051\uffc4\061\uffc4\001\002\000\050\007\uffc7\010\uffc7" +
    "\022\uffc7\023\uffc7\026\uffc7\027\uffc7\035\057\036\053\037" +
    "\063\040\061\041\056\042\065\043\066\044\060\045\062" +
    "\046\055\050\uffc7\051\uffc7\061\uffc7\001\002\000\050\007" +
    "\uffca\010\uffca\022\uffca\023\uffca\026\uffca\027\uffca\035\057" +
    "\036\053\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044" +
    "\uffca\045\uffca\046\uffca\050\uffca\051\uffca\061\uffca\001\002" +
    "\000\004\007\110\001\002\000\026\016\030\017\037\021" +
    "\042\036\036\047\025\052\046\053\034\054\021\055\017" +
    "\056\043\001\002\000\004\007\107\001\002\000\040\006" +
    "\uffd7\016\uffd7\017\uffd7\021\uffd7\030\uffd7\033\uffd7\034\uffd7" +
    "\036\uffd7\047\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\060\uffd7\001\002\000\040\006\uffda\016\uffda\017\uffda" +
    "\021\uffda\030\uffda\033\uffda\034\uffda\036\uffda\047\uffda\052" +
    "\uffda\053\uffda\054\uffda\055\uffda\056\uffda\060\uffda\001\002" +
    "\000\004\007\114\001\002\000\004\007\113\001\002\000" +
    "\040\006\uffd8\016\uffd8\017\uffd8\021\uffd8\030\uffd8\033\uffd8" +
    "\034\uffd8\036\uffd8\047\uffd8\052\uffd8\053\uffd8\054\uffd8\055" +
    "\uffd8\056\uffd8\060\uffd8\001\002\000\040\006\uffd9\016\uffd9" +
    "\017\uffd9\021\uffd9\030\uffd9\033\uffd9\034\uffd9\036\uffd9\047" +
    "\uffd9\052\uffd9\053\uffd9\054\uffd9\055\uffd9\056\uffd9\060\uffd9" +
    "\001\002\000\050\007\uffbe\010\uffbe\022\uffbe\023\uffbe\026" +
    "\uffbe\027\uffbe\035\057\036\053\037\uffbe\040\uffbe\041\uffbe" +
    "\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046\uffbe\050\uffbe\051" +
    "\uffbe\061\uffbe\001\002\000\026\016\030\017\037\021\042" +
    "\036\036\047\025\052\046\053\034\054\021\055\017\056" +
    "\043\001\002\000\004\052\120\001\002\000\014\010\ufff7" +
    "\023\117\024\116\025\uffd0\063\uffd0\001\002\000\004\010" +
    "\ufff9\001\002\000\006\025\uffd1\063\uffd1\001\002\000\036" +
    "\010\ufff6\023\124\035\057\036\053\037\063\040\061\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\050\054" +
    "\051\067\001\002\000\004\052\006\001\002\000\004\010" +
    "\ufff8\001\002\000\026\016\030\017\037\021\042\036\036" +
    "\047\025\052\046\053\034\054\021\055\017\056\043\001" +
    "\002\000\012\007\uffcf\022\uffcf\026\uffcf\027\uffcf\001\002" +
    "\000\026\016\030\017\037\021\042\036\036\047\025\052" +
    "\046\053\034\054\021\055\017\056\043\001\002\000\034" +
    "\022\132\035\057\036\053\037\063\040\061\041\056\042" +
    "\065\043\066\044\060\045\062\046\055\050\054\051\067" +
    "\001\002\000\004\031\133\001\002\000\004\057\134\001" +
    "\002\000\036\016\ufffb\017\ufffb\021\ufffb\030\ufffb\033\ufffb" +
    "\034\ufffb\036\ufffb\047\ufffb\052\ufffb\053\ufffb\054\ufffb\055" +
    "\ufffb\056\ufffb\060\ufffb\001\002\000\042\006\uffd4\016\uffd4" +
    "\017\uffd4\021\uffd4\030\uffd4\032\136\033\uffd4\034\uffd4\036" +
    "\uffd4\047\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4" +
    "\060\uffd4\001\002\000\004\057\134\001\002\000\040\006" +
    "\uffd5\016\uffd5\017\uffd5\021\uffd5\030\uffd5\033\uffd5\034\uffd5" +
    "\036\uffd5\047\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056" +
    "\uffd5\060\uffd5\001\002\000\036\016\030\017\037\021\042" +
    "\030\031\033\023\034\026\036\036\047\025\052\033\053" +
    "\034\054\021\055\017\056\043\060\uffdb\001\002\000\004" +
    "\060\142\001\002\000\046\005\uffdd\006\uffdd\016\uffdd\017" +
    "\uffdd\020\uffdd\021\uffdd\030\uffdd\032\uffdd\033\uffdd\034\uffdd" +
    "\036\uffdd\047\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\060\uffdd\001\002\000\040\006\uffd6\016\uffd6\017\uffd6" +
    "\021\uffd6\030\uffd6\033\uffd6\034\uffd6\036\uffd6\047\uffd6\052" +
    "\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\060\uffd6\001\002" +
    "\000\034\007\145\035\057\036\053\037\063\040\061\041" +
    "\056\042\065\043\066\044\060\045\062\046\055\050\054" +
    "\051\067\001\002\000\040\006\uffd2\016\uffd2\017\uffd2\021" +
    "\uffd2\030\uffd2\033\uffd2\034\uffd2\036\uffd2\047\uffd2\052\uffd2" +
    "\053\uffd2\054\uffd2\055\uffd2\056\uffd2\060\uffd2\001\002\000" +
    "\050\007\uffbd\010\uffbd\022\uffbd\023\uffbd\026\uffbd\027\uffbd" +
    "\035\057\036\053\037\063\040\061\041\056\042\065\043" +
    "\066\044\060\045\062\046\055\050\uffbd\051\uffbd\061\uffbd" +
    "\001\002\000\004\002\001\001\002\000\026\016\030\017" +
    "\037\021\042\036\036\047\025\052\046\053\034\054\021" +
    "\055\017\056\043\001\002\000\034\022\152\035\057\036" +
    "\053\037\063\040\061\041\056\042\065\043\066\044\060" +
    "\045\062\046\055\050\054\051\067\001\002\000\004\064" +
    "\153\001\002\000\004\057\134\001\002\000\040\006\uffd3" +
    "\016\uffd3\017\uffd3\021\uffd3\030\uffd3\033\uffd3\034\uffd3\036" +
    "\uffd3\047\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\060\uffd3\001\002\000\006\006\uffdc\060\uffdc\001\002\000" +
    "\050\021\047\023\157\025\uffd0\026\uffbc\027\uffbc\035\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\046\uffbc\050\uffbc\051\uffbc\061\uffbc\063\uffd0" +
    "\001\002\000\004\052\160\001\002\000\010\023\157\025" +
    "\uffd0\063\uffd0\001\002\000\004\021\162\001\002\000\010" +
    "\022\170\052\163\062\166\001\002\000\006\010\uffe1\061" +
    "\uffe1\001\002\000\004\010\213\001\002\000\006\010\uffe2" +
    "\061\211\001\002\000\004\052\210\001\002\000\004\022" +
    "\205\001\002\000\006\010\174\057\uffde\001\002\000\006" +
    "\007\172\022\uffe5\001\002\000\006\052\163\062\166\001" +
    "\002\000\004\022\uffe6\001\002\000\014\011\204\012\202" +
    "\013\201\014\177\015\203\001\002\000\004\057\134\001" +
    "\002\000\010\005\uffe7\020\uffe7\052\uffe7\001\002\000\010" +
    "\007\ufff0\022\ufff0\057\ufff0\001\002\000\004\057\uffdf\001" +
    "\002\000\010\007\ufff1\022\ufff1\057\ufff1\001\002\000\010" +
    "\007\ufff2\022\ufff2\057\ufff2\001\002\000\010\007\uffef\022" +
    "\uffef\057\uffef\001\002\000\010\007\ufff3\022\ufff3\057\ufff3" +
    "\001\002\000\006\010\174\057\uffde\001\002\000\004\057" +
    "\134\001\002\000\010\005\uffe8\020\uffe8\052\uffe8\001\002" +
    "\000\006\010\uffe0\061\uffe0\001\002\000\006\052\163\062" +
    "\166\001\002\000\004\010\uffe3\001\002\000\014\011\204" +
    "\012\202\013\201\014\177\015\203\001\002\000\006\007" +
    "\uffe4\022\uffe4\001\002\000\004\005\uffff\001\002\000\030" +
    "\011\204\012\202\013\201\014\177\015\203\016\030\017" +
    "\037\053\034\054\021\055\017\056\043\001\002\000\004" +
    "\007\ufff5\001\002\000\004\007\222\001\002\000\004\007" +
    "\ufff4\001\002\000\044\005\ufffa\006\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\030\ufffa\033\ufffa\034\ufffa\036\ufffa\047" +
    "\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\060\ufffa" +
    "\001\002\000\004\052\006\001\002\000\004\002\000\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\222\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\011\005\007\006\006\012\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\214\005\007\006" +
    "\006\012\012\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\003\013\005\007\006\006\012\012\001\001\000" +
    "\002\001\001\000\004\004\015\001\001\000\024\005\034" +
    "\006\006\011\021\021\023\022\017\023\040\024\037\025" +
    "\026\026\031\001\001\000\002\001\001\000\020\011\021" +
    "\021\154\022\017\023\040\024\037\025\026\026\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\021\025\044\026\145\001" +
    "\001\000\010\011\021\025\044\026\143\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\011\021\025\044\026\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\011\021" +
    "\025\044\026\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\021" +
    "\024\047\025\044\026\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\021\025\044" +
    "\026\102\001\001\000\010\011\021\025\044\026\101\001" +
    "\001\000\010\011\021\025\044\026\100\001\001\000\010" +
    "\011\021\025\044\026\077\001\001\000\010\011\021\025" +
    "\044\026\076\001\001\000\010\011\021\025\044\026\075" +
    "\001\001\000\010\011\021\025\044\026\074\001\001\000" +
    "\010\011\021\025\044\026\073\001\001\000\010\011\021" +
    "\025\044\026\072\001\001\000\002\001\001\000\010\011" +
    "\021\025\044\026\071\001\001\000\010\011\021\025\044" +
    "\026\070\001\001\000\010\011\021\025\044\026\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\021\024\105\025\044\026\031\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\021\025\044\026" +
    "\122\001\001\000\006\006\120\023\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\124\001\001\000\002\001\001\000\012" +
    "\011\021\024\126\025\044\026\031\001\001\000\002\001" +
    "\001\000\010\011\021\025\044\026\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\134\001\001\000" +
    "\004\004\137\001\001\000\002\001\001\000\004\020\136" +
    "\001\001\000\002\001\001\000\024\005\034\006\006\011" +
    "\021\021\140\022\017\023\040\024\037\025\026\026\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\021\025\044\026\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\013\166\014\170\015\164\016\163\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\174\001" +
    "\001\000\002\001\001\000\012\013\172\014\170\015\164" +
    "\016\163\001\001\000\002\001\001\000\004\010\177\001" +
    "\001\000\004\020\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\205" +
    "\001\001\000\004\020\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\164\016\211\001\001\000\002" +
    "\001\001\000\004\010\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\217\010\216\011\220\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\120\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    List<Identifier> vars = new ArrayList<>();
    List<ExprOp> exprs = new ArrayList<>();
    List<StatOp> stats = new ArrayList<>();
    List<PVarOp> pVarOpList = new ArrayList<>();
    List<ParDeclOp> parDeclOpList = new ArrayList<>();
    List<VarOptInitOp> varOptInitOpList = new ArrayList<>();
    Stack<List<VarDeclOp>> varDeclOpStack = new Stack<>();
    List<VarDeclOp> varDeclOpList = new ArrayList<>();
    List<Object> varDeclOporDefDeclOp = new ArrayList<>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programma ::= PROGRAM Decls BEGIN VarDecls Statements END 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new ProgramOp(new ArrayList<Object>((List<Object>) d), new BeginEndOp((List<VarDeclOp>) ((Stack<List<VarDeclOp>>) vd).pop(), new ArrayList<StatOp>((List<StatOp>) stmts)));
    stats.clear();
    varDeclOporDefDeclOp.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Programma",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programma EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decls ::= VarDecl Decls 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 varDeclOporDefDeclOp.add(0, vd); RESULT = varDeclOporDefDeclOp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decls ::= DefDecl Decls 
            {
              Object RESULT =null;
		int ddleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ddright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object dd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 varDeclOporDefDeclOp.add(0, dd); RESULT = varDeclOporDefDeclOp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decls ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Object>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decls",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecls ::= VarDecls VarDecl 
            {
              Object RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object vd = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varDeclOpStack.peek().add((VarDeclOp) vd); RESULT = varDeclOpStack; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecls ::= 
            {
              Object RESULT =null;
		 varDeclOpStack.push(new ArrayList<VarDeclOp>()); RESULT = varDeclOpStack; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VarsOptInit COLON TypeOrConstant SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new VarDeclOp(new ArrayList<VarOptInitOp>((List<VarOptInitOp>)v), tc);
    varOptInitOpList.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarsOptInit ::= ID PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 varOptInitOpList.add(0, new VarOptInitOp(new Identifier((String) id), null)); RESULT = varOptInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarsOptInit ::= ID ASSIGNDECL Expr PIPE VarsOptInit 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 varOptInitOpList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) expr)); RESULT = varOptInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarsOptInit ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varOptInitOpList.add(0, new VarOptInitOp(new Identifier((String) id), null)); RESULT = varOptInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarsOptInit ::= ID ASSIGNDECL Expr 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object expr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 varOptInitOpList.add(0, new VarOptInitOp(new Identifier((String) id), (ExprOp) expr)); RESULT = varOptInitOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarsOptInit",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeOrConstant ::= Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeOrConstant ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrConstant",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= INT 
            {
              Object RESULT =null;
		 RESULT = "int"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Object RESULT =null;
		 RESULT = "bool"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= DOUBLE 
            {
              Object RESULT =null;
		 RESULT = "double"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= STRING 
            {
              Object RESULT =null;
		 RESULT = "string"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= CHAR 
            {
              Object RESULT =null;
		 RESULT = "char"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Constant ::= TRUE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Constant ::= FALSE 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Constant ::= INT_CONST 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Constant ::= DOUBLE_CONST 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Constant ::= CHAR_CONST 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Constant ::= STRING_CONST 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Constant(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Constant",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDecl ::= DEF ID LPAR ParDecls RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pardeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pardeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pardecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOp(new Identifier((String) id), new ArrayList<ParDeclOp>((List<ParDeclOp>) pardecls), (String) t, (BodyOp) body); parDeclOpList.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefDecl ::= DEF ID LPAR RPAR OptType Body 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DefDeclOp(new Identifier((String) id), null, (String) t, (BodyOp) body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDecl",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParDecls ::= ParDecl SEMI ParDecls 
            {
              Object RESULT =null;
		int pardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 parDeclOpList.add(0, (ParDeclOp) pardecl); RESULT = parDeclOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParDecls ::= ParDecl 
            {
              Object RESULT =null;
		int pardeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pardeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pardecl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parDeclOpList.add(0, (ParDeclOp) pardecl); RESULT = parDeclOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecls",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ParDecl ::= PVars COLON Type 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new ParDeclOp(new ArrayList<PVarOp>((List<PVarOp>) p), (String) t);
    pVarOpList.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PVars ::= PVar COMMA PVars 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 pVarOpList.add(0, (PVarOp) p); RESULT = pVarOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PVars ::= PVar 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pVarOpList.add(0, (PVarOp) p); RESULT = pVarOpList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVars",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PVar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PVar ::= REF ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PVarOp(new Identifier((String) id), true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PVar",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OptType ::= COLON Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OptType ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OptType",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Body ::= LBRAC VarDecls Statements RBRAC 
            {
              Object RESULT =null;
		int vardeclsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vardeclsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vardecls = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object stmts = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new BodyOp((List<VarDeclOp>) varDeclOpStack.pop(), new ArrayList<StatOp>((List<StatOp>) stmts));
    varDeclOpList.clear();
    stats.clear();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Statements ::= Stat Statements 
            {
              Object RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 stats.add(0, (StatOp) st); RESULT = stats; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Statements ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<StatOp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statements",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= Vars IN SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ReadOp(new ArrayList<Identifier>((List<Identifier>) v)); vars.clear();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= Exprs OUT SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(new ArrayList<ExprOp>((List<ExprOp>) e), false); exprs.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= Exprs OUTNL SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new WriteOp(new ArrayList<ExprOp>((List<ExprOp>) e), true); exprs.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= Vars ASSIGN Exprs SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        RESULT = new AssignOp(new ArrayList<Identifier>((List<Identifier>) v), new ArrayList<ExprOp>((List<ExprOp>) e));
        exprs.clear();
        vars.clear();
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= FunCall SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= IF LPAR Expr RPAR THEN Body ELSE Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenElseOp((ExprOp) e,(BodyOp) b1,(BodyOp) b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= IF LPAR Expr RPAR THEN Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfThenOp((ExprOp) e,(BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= WHILE LPAR Expr RPAR DO Body 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileOp((ExprOp) e,(BodyOp) b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN Expr SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnOp((ExprOp) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Vars ::= ID PIPE Vars 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 vars.add(0, new Identifier((String) id)); RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Vars ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 vars.add(0, new Identifier((String) id)); RESULT = vars; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Vars",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exprs ::= Expr COMMA Exprs 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 exprs.add(0, (ExprOp) e); RESULT = exprs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exprs ::= Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 exprs.add(0, (ExprOp) e); RESULT = exprs; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Exprs",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FunCall ::= ID LPAR Exprs RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallOp(new Identifier((String) id), new ArrayList<ExprOp>((List<ExprOp>) e)); exprs.clear(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FunCall ::= ID LPAR RPAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallOp(new Identifier((String) id), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Expr ::= Expr PLUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "+"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Expr ::= Expr MINUS Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Expr ::= Expr TIMES Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "*"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Expr ::= Expr DIV Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "/"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Expr ::= Expr AND Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Expr ::= Expr OR Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Expr ::= Expr GT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, ">"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= Expr GE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, ">="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= Expr LT Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "<"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= Expr LE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "<="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= Expr EQ Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "=="); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Expr NE Expr 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExprOp((ExprOp) e1, (ExprOp) e2, "<>"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= LPAR Expr RPAR 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= MINUS Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp((ExprOp) e, "-"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= NOT Expr 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExprOp((ExprOp) e, "not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier((String) id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= FunCall 
            {
              Object RESULT =null;
		int funcallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funcallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object funcall = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = funcall; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Constant 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
